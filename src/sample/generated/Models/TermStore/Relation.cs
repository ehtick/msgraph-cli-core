// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models.TermStore
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Relation : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The fromTerm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.TermStore.Term? FromTerm { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.TermStore.Term FromTerm { get; set; }
#endif
        /// <summary>The relationship property</summary>
        public global::ApiSdk.Models.TermStore.RelationType? Relationship { get; set; }
        /// <summary>The set property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.TermStore.Set? Set { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.TermStore.Set Set { get; set; }
#endif
        /// <summary>The toTerm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.TermStore.Term? ToTerm { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.TermStore.Term ToTerm { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.TermStore.Relation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.TermStore.Relation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.TermStore.Relation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "fromTerm", n => { FromTerm = n.GetObjectValue<global::ApiSdk.Models.TermStore.Term>(global::ApiSdk.Models.TermStore.Term.CreateFromDiscriminatorValue); } },
                { "relationship", n => { Relationship = n.GetEnumValue<global::ApiSdk.Models.TermStore.RelationType>(); } },
                { "set", n => { Set = n.GetObjectValue<global::ApiSdk.Models.TermStore.Set>(global::ApiSdk.Models.TermStore.Set.CreateFromDiscriminatorValue); } },
                { "toTerm", n => { ToTerm = n.GetObjectValue<global::ApiSdk.Models.TermStore.Term>(global::ApiSdk.Models.TermStore.Term.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::ApiSdk.Models.TermStore.Term>("fromTerm", FromTerm);
            writer.WriteEnumValue<global::ApiSdk.Models.TermStore.RelationType>("relationship", Relationship);
            writer.WriteObjectValue<global::ApiSdk.Models.TermStore.Set>("set", Set);
            writer.WriteObjectValue<global::ApiSdk.Models.TermStore.Term>("toTerm", ToTerm);
        }
    }
}
#pragma warning restore CS0618
